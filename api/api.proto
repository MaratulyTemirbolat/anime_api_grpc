syntax = "proto3";

import "google/protobuf/timestamp.proto";

option go_package = "./../api";

package api;

import "google/api/annotations.proto";


// USER SERVICE REST IMPLEMENTATION

service UserService {
    rpc RegisterUser(UserRegisterRequest) returns (UserLoginRegisterResponse) {
        option (google.api.http) = {
            post: "/register"
            body: "*"
        };
    }
    rpc LoginUser(UserLoginRequest) returns (UserLoginRegisterResponse) {
        option (google.api.http) = {
            post: "/login"
            body: "*"
        };
    }
    rpc BlockUser(UserAddBlockUserRequest) returns (ActionResponse) {
        option (google.api.http) = {
            post: "/block"
            body: "*"
        };
    }
    rpc AddUser(UserAddBlockUserRequest) returns (ActionResponse) {
        option (google.api.http) = {
            post: "/add"
            body: "*"
        };
    }
    rpc ViewUserPage(ViewUserPageRequest) returns (ViewUserPageResponse) {
        option (google.api.http) = {
            get:"/user/{id}"
        };
    }
    rpc ViewAllUsersInfo(ViewAllUsersInfoRequest) returns (ViewAllUsersInfoResponse) {
        option (google.api.http) = {
            get:"/users"
        };
    }
}

message ViewAllUsersInfoRequest{
    uint32 curUserID = 1;
}

message ViewAllUsersInfoResponse {
    repeated ViewUserPageResponse allUsers = 1;
}

message UserLoginRequest {
    string emailLogin = 1;
    string password = 2;
}

message UserLoginRegisterResponse {
    int32 id = 1;
}

message UserRegisterRequest {
    string username = 1;
    string email = 2;
    string password = 3;
    string firstName = 4;
    string lastName = 5;
}

message UserAddBlockUserRequest {
    uint32 fromUserId = 1;
    uint32 toUserId = 2;
}

message ViewUserPageRequest {
    uint32 userId = 1;
    uint32 visitedUserId = 2;
}

message ViewUserPageResponse {
    uint32 userId = 1;
    string firstName = 2;
    string lastName = 3;
    string email = 4;
    string username = 5;
}
// ANIME SERVICE REST IMPLEMENTATION

service AnimeService {
    rpc HandleAnime(UserAnimeActionRequest) returns (ActionResponse) {
        option (google.api.http) = {
            post: "/animehandle"
            body: "*"
        };
    }
    rpc RemoveAnime(RemoveAnimeRequest) returns (AnimeResponse) {
        option (google.api.http) = {
            post: "/removeanime"
            body: "*"
        };
    }
    rpc ViewAnime(ViewAnimeRequest) returns (ViewAnimeResponse) {
        option (google.api.http) = {
            get:"/anime/{id}"
        };
    }
    rpc ViewAllAnimes(ViewAllAnimeRequest) returns (ViewAllAnimeResponse) {
        option (google.api.http) = {
            get:"/animes"
        };
    }
}

message ViewAllAnimeRequest{
    uint32 userID = 1;
}

message ViewAllAnimeResponse {
    repeated ViewAnimeResponse allAnimes = 1;
}

message RemoveAnimeRequest{
    uint32 userId = 1;
    uint32 animeId = 2;
}

message UserAnimeActionRequest {
    uint32 userId = 1;
    uint32 animeId = 2;
    uint32 actionId = 3;
    bool isLike = 4;
    double rating = 5;
}


message AnimeResponse{
    string name = 1;
    bool success = 2;
    string message = 3;
}

message ViewAnimeRequest{
    uint32 userId = 1;
    uint32 animeId = 2;
}

message ViewAnimeResponse{
    uint32 animeId = 1;
    string name = 2;
    string description = 3;
    string releaseDate = 4;
    string animeGroup = 5;
    double rating = 6;
    int32 viewsNumber = 7;
    string studioName = 8;
    repeated string genres = 9; 
}

// COMMENT SERVICE REST IMPLEMENTATION

service CommentService {
    rpc ShowAnimeComments(ShowAnimeCommentsRequest) returns (ShowAnimeCommentsResponse) {
        option (google.api.http) = {
            get:"comments/anime/{id}"
        };
    }
    rpc CommentAnime(CommentAnimeRequest) returns (ActionResponse) {
        option (google.api.http) = {
            post: "comment/anime"
            body: "*"
        };
    }
    rpc ReplyUserCommentAnime(ReplyUserCommentAnimeRequest) returns (ActionResponse) {
        option (google.api.http) = {
            post: "comment/reply/anime"
            body: "*"
        };
    }
}

message EditAnimeCommentRequest {
    uint32 userId = 1;
    uint32 commentId = 2;
    string content = 3;
    
}

message ShowAnimeCommentsRequest {
    uint32 animeId = 1;
}

message ShowAnimeCommentsResponse {
    repeated AnimeCommentResponse animeComments = 1;
}

message AnimeCommentResponse {
    uint32 animeId = 1;
    uint32 commentId = 2;
    string content = 3;
    uint32 repliedMessageId = 4;
    google.protobuf.Timestamp dateTimeCreated = 5;
}

message CommentAnimeRequest {
    uint32 userId = 1;
    uint32 animeId = 2;
    string content = 3;
}

message ReplyUserCommentAnimeRequest {
    uint32 userId = 1;
    uint32 animeId = 2;
    string content = 3;
    uint32 repliedCommentId = 4;
}

message ActionResponse {
    bool success = 1;
    string message = 2;
}