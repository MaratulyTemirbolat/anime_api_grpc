-- PROCEDURES

CREATE OR REPLACE FUNCTION is_friends_data_correct(user_id integer DEFAULT NULL, friend_id integer DEFAULT NULL)
    RETURNS void
AS
$$
DECLARE
BEGIN
    CASE
        WHEN friend_id IS NULL OR user_id IS NULL THEN
            RAISE EXCEPTION 'All IDs must be provided';
        WHEN friend_id <= 0 OR user_id <= 0 THEN
            RAISE EXCEPTION 'The ID can not be less than 1';
        WHEN user_id = friend_id THEN
            RAISE EXCEPTION 'You cannot add yourself to friends';
        ELSE
        END CASE;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION is_friends_data_correct(user_id integer DEFAULT NULL, friend_id integer DEFAULT NULL)
    RETURNS void
AS
$$
DECLARE
BEGIN
    CASE
        WHEN friend_id IS NULL OR user_id IS NULL THEN
            RAISE EXCEPTION 'All IDs must be provided';
        WHEN friend_id <= 0 OR user_id <= 0 THEN
            RAISE EXCEPTION 'The ID can not be less than 1';
        WHEN user_id = friend_id THEN
            RAISE EXCEPTION 'You cannot send the same ID';
        ELSE
        END CASE;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION get_found_user_id(user_id integer)
    RETURNS INT
AS
$$
DECLARE
BEGIN
    RETURN (SELECT id from users where id = user_id LIMIT 1);
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION is_user_deleted(user_id integer)
    RETURNS bool
AS
$$
DECLARE
    user_deleted_at timestamp := (SELECT deleted_at
                                  FROM users
                                  WHERE id = user_id
                                  LIMIT 1);
BEGIN
    IF user_deleted_at IS NULL THEN
        RETURN False;
    END IF;
    RETURN True;
END;
$$ LANGUAGE plpgsql;

-- ADD USER TO FRIEND
CREATE OR REPLACE PROCEDURE add_friend(user_id integer DEFAULT NULL, friend_id integer DEFAULT NULL)
AS
$$
DECLARE
    found_friend_id     INT  := get_found_user_id(friend_id);
    is_friend_deleted   bool := is_user_deleted(friend_id);
    found_cur_user_id   INT  := get_found_user_id(user_id);
    is_cur_user_deleted bool := is_user_deleted(user_id);
BEGIN
    PERFORM is_friends_data_correct(user_id, friend_id);

    IF found_cur_user_id IS NULL THEN
        RAISE EXCEPTION 'You are not existed';
    END IF;

    IF is_cur_user_deleted = True THEN
        RAISE EXCEPTION 'Your account is deleted';
    END IF;

    IF found_friend_id IS NULL THEN
        RAISE EXCEPTION 'The user that you wanted to add not found';
    END IF;

    IF is_friend_deleted = True THEN
        RAISE EXCEPTION 'Account of the found user is deleted';
    END IF;

    INSERT INTO friends(user_a_id, user_b_id) VALUES (user_id, friend_id);
    RAISE INFO 'You are successfully friend';
END
$$ LANGUAGE plpgsql;

call add_friend(6, 7);
SELECT *
FROm friends;
SELECT *
FROM users;
-- BLOCK USER
CREATE OR REPLACE FUNCTION are_friends(user_id integer, friend_id integer)
    RETURNS bool
AS
$$
DECLARE
BEGIN
    RETURN EXISTS(SELECT id from friends WHERE user_a_id = user_id AND user_b_id = friend_id);
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE PROCEDURE block_unblock_user(user_id integer DEFAULT NULL, friend_id integer DEFAULT NULL,
                                               action_id INTEGER DEFAULT NULL)
AS
$$
DECLARE
    found_friend_id       INT  := get_found_user_id(friend_id);
    is_friend_deleted     bool := is_user_deleted(friend_id);
    found_cur_user_id     INT  := get_found_user_id(user_id);
    is_cur_user_deleted   bool := is_user_deleted(user_id);
    are_friends           bool := are_friends(user_id, friend_id);
    block_action CONSTANT INT  := 1;
    block_unblock_action  bool := False;
BEGIN
    PERFORM is_friends_data_correct(user_id, friend_id);
    IF action_id <> 1 AND action_id <> 2 OR action_id is NULL THEN
        RAISE EXCEPTION 'You need to SET ACTION: 1 - BLOCK; 2 - UNBLOCK!';
    END IF;
    IF found_cur_user_id IS NULL THEN
        RAISE EXCEPTION 'You are not existed';
    END IF;

    IF is_cur_user_deleted = True THEN
        RAISE EXCEPTION 'Your account is deleted';
    END IF;

    IF found_friend_id IS NULL THEN
        RAISE EXCEPTION 'The user that you wanted to BLOCK not found';
    END IF;

    IF is_friend_deleted = True THEN
        RAISE EXCEPTION 'Account of the found user is deleted';
    END IF;

    IF are_friends = False THEN
        RAISE EXCEPTION 'You can not block user while you were not friends';
    END IF;

    IF action_id = block_action THEN
        block_unblock_action := True;
    ELSE
        block_unblock_action := False;
    END IF;

    UPDATE friends
    SET is_blocked = block_unblock_action
    WHERE user_a_id = user_id
      AND user_b_id = friend_id;
    RAISE INFO 'You successfully blocked your friend with id %', friend_id;
END
$$ LANGUAGE plpgsql;

call block_unblock_user(3, 7, 2);


-- Действие над Аниме
CREATE OR REPLACE FUNCTION is_id_valid(some_id INT DEFAULT NULL)
    RETURNS void
AS
$$
DECLARE
BEGIN
    IF some_id IS NULL THEN
        RAISE EXCEPTION 'The ID must be PROVIDED';
    ELSIF some_id <= 0 THEN
        RAISE EXCEPTION 'The ID can not be negative';
    ELSE
    END IF;
END;
$$ LANGUAGE plpgsql;
-- For Action_ID
-- 1 - Буду смотреть
-- 2 - Сейчас смотрю
-- 3 - Брошено
-- 4 - Просмотрено
-- 5 - Другое
CREATE OR REPLACE PROCEDURE user_anime_action(user_id int DEFAULT NULL, anime_id INT DEFAULT NULL,
                                              action_id INT DEFAULT NULL, iss_favourite BOOL DEFAULT FALSE,
                                              rrating DOUBLE PRECISION DEFAULT NULL)
AS
$$
DECLARE
    found_user_id   INT := NULL;
    found_anime_id  INT := NULL;
    found_action_id INT := NULL;
BEGIN
    PERFORM is_id_valid(anime_id);
    PERFORM is_id_valid(user_id);
    PERFORM is_id_valid(action_id);

    found_anime_id := (SELECT id from animes WHERE id = anime_id LIMIT 1);
    found_user_id := get_found_user_id(user_id);
    found_action_id := (SELECT id from actions WHERE id = action_id LIMIT 1);

    IF found_anime_id IS NULL THEN
        RAISE EXCEPTION 'The ANIME with ID % is NOT FOUND', anime_id;
    END IF;

    IF found_user_id IS NULL THEN
        RAISE EXCEPTION 'The USER with ID % is NOT FOUND', user_id;
    END IF;

    IF found_action_id IS NULL THEN
        RAISE EXCEPTION 'The ACTION with ID % is NOT FOUND', action_id;
    END IF;

    IF rrating IS NOT NULL THEN
        IF rrating < 0.0 THEN
            RAISE EXCEPTION 'You cannot leave NEGATIVE rating';
        end if;
    END IF;

    INSERT INTO user_anime_actions(user_id, anime_id, action_id, is_favourite, rating)
    VALUES (user_id, anime_id, action_id, iss_favourite, rrating);
END;
$$ LANGUAGE plpgsql;
-- ПРОВЕРИТЬ АНИМЕ ВЗАИМОДЕЙСТВИЯ (НУЖНЫ ДАННЫЕ)

-- LEAVE COMMENTS ( ПРОВЕРИТЬ ТЕСТАМИ ПРИ ПОЛУЧЕНИИ ДАННЫХ )
CREATE OR REPLACE PROCEDURE leave_anime_comment(owner_user_id INT DEFAULT NULL, comment_text text DEFAULT NULL,
                                                repplied_comment_id INT DEFAULT NULL, anime_id INT DEFAULT NULL)
AS
$$
DECLARE
    found_user_id        INT := NULL;
    found_rep_comment_id INT := NULL;
    found_anime_id       INT := NULL;
BEGIN
    PERFORM is_id_valid(owner_user_id);
    PERFORM is_id_valid(anime_id);
    IF repplied_comment_id IS NOT NULL THEN
        PERFORM is_id_valid(repplied_comment_id);
        found_rep_comment_id := (SELECT id FROM comments WHERE id = repplied_comment_id LIMIT 1);
    END IF;

    IF comment_text IS NULL THEN
        RAISE EXCEPTION 'You must ENTER THE CONTENT of your comment';
    END IF;

    found_user_id := get_found_user_id(owner_user_id);
    found_anime_id := (SELECT id FROM animes WHERE id = anime_id LIMIT 1);

    IF found_user_id IS NULL THEN
        RAISE EXCEPTION 'The USER with ID % is NOT FOUND', owner_user_id;
    END IF;

    IF found_anime_id IS NULL THEN
        RAISE EXCEPTION 'The ANIME with ID % is NOT FOUND', anime_id;
    END IF;

    IF found_rep_comment_id IS NULL AND repplied_comment_id IS NOT NULL THEN
        RAISE EXCEPTION 'The COMMENT with ID % is DOES NOT EXIST', repplied_comment_id;
    END IF;

    INSERT INTO comments(content, replied_comment_id, owner_id, anime_id)
    VALUES (comment_text, repplied_comment_id, owner_user_id, anime_id);
END;
$$ LANGUAGE plpgsql;


SELECT *
FROM users;
SELECT *
FROm friends;

SELECT COALESCE(
               (SELECT MAX(id) FROM users WHERE id = 3)
           , NULL) AS max_id;
SELECT COALESCE(
               (SELECT first_name FROM users WHERE id = 1)
           , NULL);
