// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	RegisterUser(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserLoginRegisterResponse, error)
	LoginUser(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginRegisterResponse, error)
	BlockUser(ctx context.Context, in *UserAddBlockUserRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	AddUser(ctx context.Context, in *UserAddBlockUserRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	ViewUserPage(ctx context.Context, in *ViewUserPageRequest, opts ...grpc.CallOption) (*ViewUserPageResponse, error)
	ViewAllUsersInfo(ctx context.Context, in *ViewAllUsersInfoRequest, opts ...grpc.CallOption) (*ViewAllUsersInfoResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) RegisterUser(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserLoginRegisterResponse, error) {
	out := new(UserLoginRegisterResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginUser(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginRegisterResponse, error) {
	out := new(UserLoginRegisterResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BlockUser(ctx context.Context, in *UserAddBlockUserRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/BlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUser(ctx context.Context, in *UserAddBlockUserRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ViewUserPage(ctx context.Context, in *ViewUserPageRequest, opts ...grpc.CallOption) (*ViewUserPageResponse, error) {
	out := new(ViewUserPageResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/ViewUserPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ViewAllUsersInfo(ctx context.Context, in *ViewAllUsersInfoRequest, opts ...grpc.CallOption) (*ViewAllUsersInfoResponse, error) {
	out := new(ViewAllUsersInfoResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/ViewAllUsersInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	RegisterUser(context.Context, *UserRegisterRequest) (*UserLoginRegisterResponse, error)
	LoginUser(context.Context, *UserLoginRequest) (*UserLoginRegisterResponse, error)
	BlockUser(context.Context, *UserAddBlockUserRequest) (*ActionResponse, error)
	AddUser(context.Context, *UserAddBlockUserRequest) (*ActionResponse, error)
	ViewUserPage(context.Context, *ViewUserPageRequest) (*ViewUserPageResponse, error)
	ViewAllUsersInfo(context.Context, *ViewAllUsersInfoRequest) (*ViewAllUsersInfoResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) RegisterUser(context.Context, *UserRegisterRequest) (*UserLoginRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUserServiceServer) LoginUser(context.Context, *UserLoginRequest) (*UserLoginRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUserServiceServer) BlockUser(context.Context, *UserAddBlockUserRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedUserServiceServer) AddUser(context.Context, *UserAddBlockUserRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserServiceServer) ViewUserPage(context.Context, *ViewUserPageRequest) (*ViewUserPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewUserPage not implemented")
}
func (UnimplementedUserServiceServer) ViewAllUsersInfo(context.Context, *ViewAllUsersInfoRequest) (*ViewAllUsersInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewAllUsersInfo not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterUser(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginUser(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddBlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/BlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BlockUser(ctx, req.(*UserAddBlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddBlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*UserAddBlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ViewUserPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewUserPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ViewUserPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/ViewUserPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ViewUserPage(ctx, req.(*ViewUserPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ViewAllUsersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewAllUsersInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ViewAllUsersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/ViewAllUsersInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ViewAllUsersInfo(ctx, req.(*ViewAllUsersInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _UserService_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UserService_LoginUser_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _UserService_BlockUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
		{
			MethodName: "ViewUserPage",
			Handler:    _UserService_ViewUserPage_Handler,
		},
		{
			MethodName: "ViewAllUsersInfo",
			Handler:    _UserService_ViewAllUsersInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// AnimeServiceClient is the client API for AnimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnimeServiceClient interface {
	HandleAnime(ctx context.Context, in *UserAnimeActionRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	RemoveAnime(ctx context.Context, in *RemoveAnimeRequest, opts ...grpc.CallOption) (*AnimeResponse, error)
	ViewAnime(ctx context.Context, in *ViewAnimeRequest, opts ...grpc.CallOption) (*ViewAnimeResponse, error)
	ViewAllAnimes(ctx context.Context, in *ViewAllAnimeRequest, opts ...grpc.CallOption) (*ViewAllAnimeResponse, error)
}

type animeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnimeServiceClient(cc grpc.ClientConnInterface) AnimeServiceClient {
	return &animeServiceClient{cc}
}

func (c *animeServiceClient) HandleAnime(ctx context.Context, in *UserAnimeActionRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/api.AnimeService/HandleAnime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) RemoveAnime(ctx context.Context, in *RemoveAnimeRequest, opts ...grpc.CallOption) (*AnimeResponse, error) {
	out := new(AnimeResponse)
	err := c.cc.Invoke(ctx, "/api.AnimeService/RemoveAnime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) ViewAnime(ctx context.Context, in *ViewAnimeRequest, opts ...grpc.CallOption) (*ViewAnimeResponse, error) {
	out := new(ViewAnimeResponse)
	err := c.cc.Invoke(ctx, "/api.AnimeService/ViewAnime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) ViewAllAnimes(ctx context.Context, in *ViewAllAnimeRequest, opts ...grpc.CallOption) (*ViewAllAnimeResponse, error) {
	out := new(ViewAllAnimeResponse)
	err := c.cc.Invoke(ctx, "/api.AnimeService/ViewAllAnimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnimeServiceServer is the server API for AnimeService service.
// All implementations must embed UnimplementedAnimeServiceServer
// for forward compatibility
type AnimeServiceServer interface {
	HandleAnime(context.Context, *UserAnimeActionRequest) (*ActionResponse, error)
	RemoveAnime(context.Context, *RemoveAnimeRequest) (*AnimeResponse, error)
	ViewAnime(context.Context, *ViewAnimeRequest) (*ViewAnimeResponse, error)
	ViewAllAnimes(context.Context, *ViewAllAnimeRequest) (*ViewAllAnimeResponse, error)
	mustEmbedUnimplementedAnimeServiceServer()
}

// UnimplementedAnimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnimeServiceServer struct {
}

func (UnimplementedAnimeServiceServer) HandleAnime(context.Context, *UserAnimeActionRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleAnime not implemented")
}
func (UnimplementedAnimeServiceServer) RemoveAnime(context.Context, *RemoveAnimeRequest) (*AnimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAnime not implemented")
}
func (UnimplementedAnimeServiceServer) ViewAnime(context.Context, *ViewAnimeRequest) (*ViewAnimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewAnime not implemented")
}
func (UnimplementedAnimeServiceServer) ViewAllAnimes(context.Context, *ViewAllAnimeRequest) (*ViewAllAnimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewAllAnimes not implemented")
}
func (UnimplementedAnimeServiceServer) mustEmbedUnimplementedAnimeServiceServer() {}

// UnsafeAnimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnimeServiceServer will
// result in compilation errors.
type UnsafeAnimeServiceServer interface {
	mustEmbedUnimplementedAnimeServiceServer()
}

func RegisterAnimeServiceServer(s grpc.ServiceRegistrar, srv AnimeServiceServer) {
	s.RegisterService(&AnimeService_ServiceDesc, srv)
}

func _AnimeService_HandleAnime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAnimeActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).HandleAnime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AnimeService/HandleAnime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).HandleAnime(ctx, req.(*UserAnimeActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_RemoveAnime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAnimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).RemoveAnime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AnimeService/RemoveAnime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).RemoveAnime(ctx, req.(*RemoveAnimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_ViewAnime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewAnimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).ViewAnime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AnimeService/ViewAnime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).ViewAnime(ctx, req.(*ViewAnimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_ViewAllAnimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewAllAnimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).ViewAllAnimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AnimeService/ViewAllAnimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).ViewAllAnimes(ctx, req.(*ViewAllAnimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnimeService_ServiceDesc is the grpc.ServiceDesc for AnimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AnimeService",
	HandlerType: (*AnimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleAnime",
			Handler:    _AnimeService_HandleAnime_Handler,
		},
		{
			MethodName: "RemoveAnime",
			Handler:    _AnimeService_RemoveAnime_Handler,
		},
		{
			MethodName: "ViewAnime",
			Handler:    _AnimeService_ViewAnime_Handler,
		},
		{
			MethodName: "ViewAllAnimes",
			Handler:    _AnimeService_ViewAllAnimes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentServiceClient interface {
	ShowAnimeComments(ctx context.Context, in *ShowAnimeCommentsRequest, opts ...grpc.CallOption) (*ShowAnimeCommentsResponse, error)
	CommentAnime(ctx context.Context, in *CommentAnimeRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	ReplyUserCommentAnime(ctx context.Context, in *ReplyUserCommentAnimeRequest, opts ...grpc.CallOption) (*ActionResponse, error)
}

type commentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceClient(cc grpc.ClientConnInterface) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) ShowAnimeComments(ctx context.Context, in *ShowAnimeCommentsRequest, opts ...grpc.CallOption) (*ShowAnimeCommentsResponse, error) {
	out := new(ShowAnimeCommentsResponse)
	err := c.cc.Invoke(ctx, "/api.CommentService/ShowAnimeComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) CommentAnime(ctx context.Context, in *CommentAnimeRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/api.CommentService/CommentAnime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) ReplyUserCommentAnime(ctx context.Context, in *ReplyUserCommentAnimeRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/api.CommentService/ReplyUserCommentAnime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
// All implementations must embed UnimplementedCommentServiceServer
// for forward compatibility
type CommentServiceServer interface {
	ShowAnimeComments(context.Context, *ShowAnimeCommentsRequest) (*ShowAnimeCommentsResponse, error)
	CommentAnime(context.Context, *CommentAnimeRequest) (*ActionResponse, error)
	ReplyUserCommentAnime(context.Context, *ReplyUserCommentAnimeRequest) (*ActionResponse, error)
	mustEmbedUnimplementedCommentServiceServer()
}

// UnimplementedCommentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentServiceServer struct {
}

func (UnimplementedCommentServiceServer) ShowAnimeComments(context.Context, *ShowAnimeCommentsRequest) (*ShowAnimeCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAnimeComments not implemented")
}
func (UnimplementedCommentServiceServer) CommentAnime(context.Context, *CommentAnimeRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentAnime not implemented")
}
func (UnimplementedCommentServiceServer) ReplyUserCommentAnime(context.Context, *ReplyUserCommentAnimeRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyUserCommentAnime not implemented")
}
func (UnimplementedCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {}

// UnsafeCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServiceServer will
// result in compilation errors.
type UnsafeCommentServiceServer interface {
	mustEmbedUnimplementedCommentServiceServer()
}

func RegisterCommentServiceServer(s grpc.ServiceRegistrar, srv CommentServiceServer) {
	s.RegisterService(&CommentService_ServiceDesc, srv)
}

func _CommentService_ShowAnimeComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowAnimeCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).ShowAnimeComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CommentService/ShowAnimeComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).ShowAnimeComments(ctx, req.(*ShowAnimeCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_CommentAnime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentAnimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CommentAnime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CommentService/CommentAnime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CommentAnime(ctx, req.(*CommentAnimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_ReplyUserCommentAnime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyUserCommentAnimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).ReplyUserCommentAnime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CommentService/ReplyUserCommentAnime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).ReplyUserCommentAnime(ctx, req.(*ReplyUserCommentAnimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentService_ServiceDesc is the grpc.ServiceDesc for CommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowAnimeComments",
			Handler:    _CommentService_ShowAnimeComments_Handler,
		},
		{
			MethodName: "CommentAnime",
			Handler:    _CommentService_CommentAnime_Handler,
		},
		{
			MethodName: "ReplyUserCommentAnime",
			Handler:    _CommentService_ReplyUserCommentAnime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
